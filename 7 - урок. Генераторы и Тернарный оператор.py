            # Генераторы list(comprehension)и dict(comprehension)
    # Пример 1.1
# a = [ 0 for i in range (10)]
# print(a)

#     # Пример 1.2
# a = [i for i in range (10)]
# print(a)

    # Пример 1.3
# a = [i**2 for i in range (10)]
# print(a)

#     # Пример 1.4
# a = [i%2 for i in range (1,21)]
# print(a)

#     # Пример 1.5
# a = [i for i in 'Good morning']
# print(a)

# #     # Пример 1.6
# a = [i*3 for i in 'Good morning']
# print(a)


        # Пример 1.7
# a = []
# for q in range(1,101):
#     a.append(q)
# print(a)
####################################################################################################
# res =[ i for w in range(1,101)]
# print(res)

#######################################################################################################

        # Пример 1.8
# chet=[]
# for w in range(1,51):
#     if w%2==0:
#         chet.append(i)
# print(chet)

#############################################################################

# res=[i for i in range(1,51) if i%2==0]
# print(res)



        #Dict(comprehension)

    #Пример 1.9  (Изменение значений или повышение цены)
# pet = {'Ai 100': 60,
#        'Ai 95': 55,
#        'Ai 92': 50,
#        'Ai 80': 30}
# newpet = {}
# for k,v in pet.items():
#     newpet.setdefault(k, v+10)
# print(petrol)
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

# pet = {'Ai 100': 60,
#        'Ai 95': 55,
#        'Ai 92': 50,
#        'Ai 80': 30}
# res = {k:v+10 for k,v in pet.items()}
# print(res)
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    #Пример 1.10 (Изменение ключа или Сортировка )
pet = {'Ai 100': 60,
       'Ai 95': 55,
       'Ai 92': 50,
       'Ai 80': 30}
res = {k:v+10 for k,v in pet.items()}

sort={}
for k,v in pet.items():
    sort.setdefault(k+" A",v)
print(sort)

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

pet = {'Ai 100': 60,
       'Ai 95': 55,
       'Ai 92': 50,
       'Ai 80': 30}
res = {k:v+10 for k,v in pet.items()}

sort={k+" B":v for k,v in pet.items()}
print(sort)

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

            # Тернарный оператор 
                #План для Тернарного оператора        #   <Значение_1> if <Условие> else <Значение_2>

        #   Пример 2.1
# while True:
    # a = int(input("Введите первое число:"))
    # b = int(input("Введите второе число:"))
#     res = print(a,"больше чем", b )if a>b else print(b,"больше чем", a )
#     print(res)

        # Пример 2.2
# while True:
#     a = int(input("Введите первое число:"))
#     res = print("Число", a, "ЧЁТНОЁ!")if a % 2==0 else print("Число", a, "НЕЧЁТНОЁ!")
#     print(res)


        #Пример 2.3
# a= int(input("Введите число"))
# b = int(input("Введите число"))
# if a>b:
#     print("Число", a, "Больше")
# else:
#     print("Число", b, "Больше")

##################################################################



             # Тернарный условный оператор
                 #  1)План для Тернарно условного оператора (<Значение_1> if <Условие_1> else <Значение_2>) if <Условие_2> else <Значение_3>
                 #  2)План для Тернарно условного оператора (<Значение_1> if <Условие_1> else <Значение_2>) if <Условие_2> else (<Значение_3> if <Условие_3> else <Значение_5>)

        #Пример 3.1
# a= int(input("Введите число"))
# b = int(input("Введите число"))
# res= print("Число", a, "Больше") if a>b else print("Число", b, "Больше")
# print(res)

#         #Пример 2.4
# a= int(input("Введите число"))
# b = int(input("Введите число"))        
# c =int(input("Введите число")) 
# if a>b and a>c:
#     print("Число", a, "Больше")
# elif b>a and b>c:
#     print("Число", c, "Больше")
# else:
#     print("Число", c, "Больше")

##############################################################################

# a= int(input("Введите число"))
# b = int(input("Введите число"))        
# c =int(input("Введите число")) 
# res = a if a>b and a>c else b if b>a and b>c else c
# print(res)

###################################################################################
























































































































